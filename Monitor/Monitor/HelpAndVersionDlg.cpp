// HelpAndVersionDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "Monitor.h"
#include "HelpAndVersionDlg.h"


// CHelpAndVersionDlg 对话框

IMPLEMENT_DYNAMIC(CHelpAndVersionDlg, CDialog)

CHelpAndVersionDlg::CHelpAndVersionDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CHelpAndVersionDlg::IDD, pParent)
{

}

CHelpAndVersionDlg::~CHelpAndVersionDlg()
{
}

void CHelpAndVersionDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}


BEGIN_MESSAGE_MAP(CHelpAndVersionDlg, CDialog)
	ON_WM_TIMER()
	ON_MESSAGE(ON_COM_RECEIVE, OnComRecv)
	ON_WM_CTLCOLOR()
	ON_WM_PAINT()
END_MESSAGE_MAP()


// CHelpAndVersionDlg 消息处理程序

//初始化
void CHelpAndVersionDlg::Init(){
	CFont * f; 
	f = new CFont; 
	f->CreateFont(15, // nHeight 
		0, // nWidth 
		0, // nEscapement 
		0, // nOrientation 
		FW_NORMAL, // nWeight 
		FALSE, // bItalic 
		FALSE, // bUnderline 
		0, // cStrikeOut 
		ANSI_CHARSET, // nCharSet 
		OUT_DEFAULT_PRECIS, // nOutPrecision 
		CLIP_DEFAULT_PRECIS, // nClipPrecision 
		DEFAULT_QUALITY, // nQuality 
		DEFAULT_PITCH | FF_SWISS, // nPitchAndFamily 
		_T("宋体")); // lpszFac 

	GetDlgItem(IDC_HELP_STATIC)->SetFont(f);
	GetDlgItem(IDC_VERSION)->SetFont(f);
	GetDlgItem(IDCANCEL)->SetFont(f);
	GetDlgItem(IDC_GROUP_STATIC)->SetFont(f);
	GetDlgItem(IDC_STATIC_COM_STATUS)->SetFont(f);
	GetDlgItem(IDC_SYSTEM_TIME_STATIC)->SetFont(f);
	GetDlgItem(IDC_STATIC_POWER)->SetFont(f);
}

//显示串口连接状态
void CHelpAndVersionDlg::ShowConnectionStatus(){
	CString str = L"";

	if(theApp.m_IsComConnected)
		str = (L"串口连接:连接");
	else
		str = str = (L"串口连接:未连接");
	((CStatic*)GetDlgItem(IDC_STATIC_COM_STATUS))->SetWindowText(str);
}

//显示系统时间
void CHelpAndVersionDlg::ShowSystemTime(){
	CTime tm; 
	tm=CTime::GetCurrentTime();
	CString str = tm.Format(L"%Y/%m/%d %H:%M:%S");
	//CString str = tm.Format(L"%H:%M:%S");
	((CStatic*)GetDlgItem(IDC_SYSTEM_TIME_STATIC))->SetWindowText(str);
}

//显示电量
void CHelpAndVersionDlg::ShowBatteryPower(){
	SYSTEM_POWER_STATUS_EX2 spsCurrent; 
	DWORD dwLen = GetSystemPowerStatusEx2(&spsCurrent, sizeof(spsCurrent), TRUE);

	CString str = L"";

	if(dwLen != 0){
		if(spsCurrent.ACLineStatus == AC_LINE_ONLINE)
		{
			if(spsCurrent.BatteryLifePercent != 100)
			{

				// 正在充电
				//SetPowerStepBmp(200);
				//MessageBox(_T("充电..."));
				str.Format(L"充电:%d%%", spsCurrent.BatteryLifePercent);
				((CStatic*)GetDlgItem(IDC_STATIC_POWER))->SetWindowText(str);

				//从资源中加载图片
				CBitmap bitmap;
				// 保存CBitmap加载的位图的句柄
				HBITMAP hBmp;   
				//加载指定位图资源 Bmp图片ID
				bitmap.LoadBitmap(IDB_CHARING_BITMAP);
				// 获取bitmap加载位图的句柄
				hBmp = (HBITMAP)bitmap.GetSafeHandle(); 
				//获取对话框上的句柄 图片控件ID
				CStatic *p=(CStatic *)GetDlgItem(IDC_POWER_PIC_STATIC);  
				//设置静态控件窗口风格为位图居中显示
				//p->ModifyStyle(0xf,SS_BITMAP|SS_CENTERIMAGE); 
				//将图片设置到Picture控件上
				p->SetBitmap(hBmp); 
			}
			else
			{
				// 充电结束
				//SetPowerStepBmp(300);
				str.Format(L"电源:%d%%", spsCurrent.BatteryLifePercent);
				((CStatic*)GetDlgItem(IDC_STATIC_POWER))->SetWindowText(str);

				//从资源中加载图片
				CBitmap bitmap;
				// 保存CBitmap加载的位图的句柄
				HBITMAP hBmp;   
				//加载指定位图资源 Bmp图片ID
				bitmap.LoadBitmap(IDB_POWER_BITMAP);
				// 获取bitmap加载位图的句柄
				hBmp = (HBITMAP)bitmap.GetSafeHandle(); 
				//获取对话框上的句柄 图片控件ID
				CStatic *p=(CStatic *)GetDlgItem(IDC_POWER_PIC_STATIC);  
				//设置静态控件窗口风格为位图居中显示
				//p->ModifyStyle(0xf,SS_BITMAP|SS_CENTERIMAGE); 
				//将图片设置到Picture控件上
				p->SetBitmap(hBmp); 

			}
		}
		else
		{
			//MessageBox(_T("直流电"));
			str.Format(L"电池:%d%%",spsCurrent.BatteryLifePercent);
			((CStatic*)GetDlgItem(IDC_STATIC_POWER))->SetWindowText(str);

			if (spsCurrent.BatteryLifePercent >= 100)
			{
				//Full
				//从资源中加载图片
				CBitmap bitmap;
				// 保存CBitmap加载的位图的句柄
				HBITMAP hBmp;   
				//加载指定位图资源 Bmp图片ID
				bitmap.LoadBitmap(IDB_FULL_BITMAP);
				// 获取bitmap加载位图的句柄
				hBmp = (HBITMAP)bitmap.GetSafeHandle(); 
				//获取对话框上的句柄 图片控件ID
				CStatic *p=(CStatic *)GetDlgItem(IDC_POWER_PIC_STATIC);  
				//设置静态控件窗口风格为位图居中显示
				//p->ModifyStyle(0xf,SS_BITMAP|SS_CENTERIMAGE); 
				//将图片设置到Picture控件上
				p->SetBitmap(hBmp); 
			}
			else if(spsCurrent.BatteryLifePercent < 100 && spsCurrent.BatteryLifePercent >= 70){
				//More
				//从资源中加载图片
				CBitmap bitmap;
				// 保存CBitmap加载的位图的句柄
				HBITMAP hBmp;   
				//加载指定位图资源 Bmp图片ID
				bitmap.LoadBitmap(IDB_MORE_BITMAP);
				// 获取bitmap加载位图的句柄
				hBmp = (HBITMAP)bitmap.GetSafeHandle(); 
				//获取对话框上的句柄 图片控件ID
				CStatic *p=(CStatic *)GetDlgItem(IDC_POWER_PIC_STATIC);  
				//设置静态控件窗口风格为位图居中显示
				//p->ModifyStyle(0xf,SS_BITMAP|SS_CENTERIMAGE); 
				//将图片设置到Picture控件上
				p->SetBitmap(hBmp); 
			}

			else if(spsCurrent.BatteryLifePercent < 70 && spsCurrent.BatteryLifePercent >= 40){
				//Media
				//从资源中加载图片
				CBitmap bitmap;
				// 保存CBitmap加载的位图的句柄
				HBITMAP hBmp;   
				//加载指定位图资源 Bmp图片ID
				bitmap.LoadBitmap(IDB_MEDIA_BITMAP);
				// 获取bitmap加载位图的句柄
				hBmp = (HBITMAP)bitmap.GetSafeHandle(); 
				//获取对话框上的句柄 图片控件ID
				CStatic *p=(CStatic *)GetDlgItem(IDC_POWER_PIC_STATIC);  
				//设置静态控件窗口风格为位图居中显示
				//p->ModifyStyle(0xf,SS_BITMAP|SS_CENTERIMAGE); 
				//将图片设置到Picture控件上
				p->SetBitmap(hBmp); 
			}
			else if(spsCurrent.BatteryLifePercent < 40 && spsCurrent.BatteryLifePercent >= 10){
				//Less
				//从资源中加载图片
				CBitmap bitmap;
				// 保存CBitmap加载的位图的句柄
				HBITMAP hBmp;   
				//加载指定位图资源 Bmp图片ID
				bitmap.LoadBitmap(IDB_LESS_BITMAP);
				// 获取bitmap加载位图的句柄
				hBmp = (HBITMAP)bitmap.GetSafeHandle(); 
				//获取对话框上的句柄 图片控件ID
				CStatic *p=(CStatic *)GetDlgItem(IDC_POWER_PIC_STATIC);  
				//设置静态控件窗口风格为位图居中显示
				//p->ModifyStyle(0xf,SS_BITMAP|SS_CENTERIMAGE); 
				//将图片设置到Picture控件上
				p->SetBitmap(hBmp); 
			}
			else{
				//Empty
				//从资源中加载图片
				CBitmap bitmap;
				// 保存CBitmap加载的位图的句柄
				HBITMAP hBmp;   
				//加载指定位图资源 Bmp图片ID
				bitmap.LoadBitmap(IDB_EMPTY_BITMAP);
				// 获取bitmap加载位图的句柄
				hBmp = (HBITMAP)bitmap.GetSafeHandle(); 
				//获取对话框上的句柄 图片控件ID
				CStatic *p=(CStatic *)GetDlgItem(IDC_POWER_PIC_STATIC);  
				//设置静态控件窗口风格为位图居中显示
				//p->ModifyStyle(0xf,SS_BITMAP|SS_CENTERIMAGE); 
				//将图片设置到Picture控件上
				p->SetBitmap(hBmp); 
			}
		}
	}
	//str.Format(L"电量:%d%%",spsCurrent.BatteryLifePercent);
	//((CStatic*)GetDlgItem(IDC_STATIC_POWER))->SetWindowText(str);
}


BOOL CHelpAndVersionDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// TODO:  在此添加额外的初始化

	Init();

	ShowBatteryPower();
	ShowConnectionStatus();
	ShowSystemTime();
	SetTimer(TIMER_EVENT_DATETIME,TIME_INTERVAL_SENCOND, NULL);
	SetTimer(TIMER_EVENT_POWER,TIME_INTERVAL_MINUTE, NULL);

	theApp.m_Com.SetWnd(this->m_hWnd);

	return TRUE;  // return TRUE unless you set the focus to a control
	// 异常: OCX 属性页应返回 FALSE
}

void CHelpAndVersionDlg::OnTimer(UINT_PTR nIDEvent)
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值

	if (nIDEvent == TIMER_EVENT_DATETIME)
	{
		ShowConnectionStatus();
		ShowSystemTime();
	}
	else if(nIDEvent == TIMER_EVENT_POWER){
		ShowBatteryPower();
	}

	CDialog::OnTimer(nIDEvent);
}

HBRUSH CHelpAndVersionDlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
{
	HBRUSH hbr = CDialog::OnCtlColor(pDC, pWnd, nCtlColor);

	// TODO:  在此更改 DC 的任何属性

	if(nCtlColor==CTLCOLOR_BTN) //更改按钮颜色
	{
		//pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(255,255,255));			//按钮文字黑色
		pDC->SetBkColor(RGB(186,71,8));		//按钮背景黄色
		HBRUSH b=CreateSolidBrush(RGB(186,71,8));
		return b;
	}
	else if(nCtlColor==CTLCOLOR_SCROLLBAR) //
	{
		//pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(0,0,0));
		pDC->SetBkColor(RGB(233,233,220));
		HBRUSH b=CreateSolidBrush(RGB(233,233,220));
		return b;
	}
	else if(nCtlColor==CTLCOLOR_EDIT) //更改编辑框
	{
		//pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(255,255,255));
		pDC->SetBkColor(RGB(0,255,0));
		HBRUSH b=CreateSolidBrush(RGB(0,255,0));
		return b;
	}
	else if(nCtlColor==CTLCOLOR_STATIC) //更改静态文本
	{
		//pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(255,255,0));
		pDC->SetBkColor(RGB(0,0,0));			//静态框文字白色
		HBRUSH b=CreateSolidBrush(RGB(0,0,0));	//静态框背景黑色
		return b;
	}
	else if(nCtlColor==CTLCOLOR_MSGBOX) //更改对话框背景色
	{
		pDC->SetTextColor(RGB(0,0,0));
		pDC->SetBkColor(RGB(166,254,1));
		HBRUSH b=CreateSolidBrush(RGB(166,254,1));
		return b;
	}

	// TODO:  如果默认的不是所需画笔，则返回另一个画笔
	return hbr;
}

void CHelpAndVersionDlg::OnPaint()
{
	CPaintDC dc(this); // device context for painting
	// TODO: 在此处添加消息处理程序代码
	// 不为绘图消息调用 CDialog::OnPaint()

	CRect rect; 
	GetClientRect(rect); 
	dc.FillSolidRect(rect,RGB(0,0,0)); 
}

LRESULT CHelpAndVersionDlg::OnComRecv(WPARAM wParam, LPARAM lParam)
{
	char buf[RCV_BUFFER_SIZE];
	TCHAR sbuf[RCV_BUFFER_SIZE];
	memset(sbuf, 0, sizeof(sbuf));
	int len;

	len = theApp.m_Com.Read(buf, RCV_BUFFER_SIZE);

	mbstowcs(sbuf, buf, len);

	CString str = L"";
	str += sbuf;
	str += _T("\r\n");

	return 1;
}